{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IAkBI,EAlBE,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eAGnC,EAAW,SAAS,aAAa,CAAC,UAClC,EAAa,SAAS,aAAa,CAAC,YAGpC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBAGxC,EAAgB,CAAA,EAChB,EAAQ,EAGN,EAAQ,EAAG,SAAS,gBAAgB,CAAC,gBAErC,EAAwB,aAAa,OAAO,CAAC,YAGnD,CAAA,OAAO,MAAM,CAAG,WACV,EACF,EAAU,WAAW,CAAG,EAExB,EAAU,WAAW,CAAG,CAE5B,EAEA,EAAS,gBAAgB,CAAC,QAAS,WACjC,IAEA,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,MAAM,CAAC,UAC5B,EAAS,SAAS,CAAC,GAAG,CAAC,SACzB,GAEA,EAAW,gBAAgB,CAAC,QAAS,WACnC,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAEtB,EAAQ,IACV,EAAU,WAAW,CAAG,EACxB,aAAa,OAAO,CAAC,YAAa,IAGpC,EAAQ,EACR,EAAU,WAAW,CAAG,EACxB,GACF,GAEA,IAAM,EAAU,WACd,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAK,IAAI,EAAI,EAAG,EA9CL,EA8Ce,IACxB,IAAK,IAAI,EAAI,EAAG,EA9CJ,EA8CiB,IAAK,CAChC,IAAM,EAAM,CAAK,CAAC,EAAE,CAAC,EAAE,CAIvB,EAFoB,CAAI,CADN,AAhDR,EAgDQ,EAAc,EACG,CAEX,EAC1B,CAGF,IACA,GACF,EAEM,EAAa,SAAC,CAAA,CAAa,CAAjC,EACE,EAAY,WAAW,CAAG,GAC1B,EAAY,SAAS,CAAC,KAAK,CAAG,GAC9B,EAAY,SAAS,CAAC,GAAG,CAAC,cAEtB,EAAM,IACR,EAAY,WAAW,CAAG,EAAI,QAAQ,GAElC,EAAM,MACR,EAAY,SAAS,CAAC,GAAG,CAAE,eAA6B,MAAA,CAAf,EAAI,QAAQ,MAI7C,OAAR,IACF,EAAgB,CAAA,EAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UAEhC,EAEA,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EACM,AAAW,cAAX,EAAE,IAAI,CACJ,KACF,IAEO,AAAW,eAAX,EAAE,IAAI,CACX,KACF,IAEO,AAAW,YAAX,EAAE,IAAI,CACX,KACF,IAEkB,cAAX,EAAE,IAAI,EACX,KACF,GAGN,GAEA,IAAM,EAAa,SAAC,CAApB,EACE,OAAO,EAAO,MAAM,CAAC,SAAA,CAArB,EAA4B,OAAA,AAAQ,IAAR,C,EAC9B,EAEM,EAAQ,SAAC,CAAf,EAGE,IAAK,IAFD,EAAS,EAAW,GAEf,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,GAAS,CAAM,CAAC,EAAE,CAClB,EAAU,WAAW,CAAG,GAM5B,IAFA,EAAS,EAAW,GAEb,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,EAEM,EAAY,WAGhB,IAAK,IAFD,EAAW,CAAA,EAEN,EAAI,EAAG,EA/HL,EA+He,IAAK,CAC7B,IAAM,EAAM,CAAK,CAAC,EAAE,CAEd,EAAS,EAAM,GAEhB,EAAa,EAAK,IACrB,CAAA,EAAW,CAAA,CADb,EAGA,CAAK,CAAC,EAAE,CAAG,EAEX,IAAK,IAAI,EAAI,EAAG,EAxIJ,EAwIiB,IAAK,CAChC,IAAM,EAAM,CAAK,CAAC,EAAE,CAAC,EAAE,CAIvB,EAFoB,CAAI,CADN,AA1IR,EA0IQ,EAAc,EACG,CAEX,EAC1B,CACF,CAEA,OAAO,CACT,EAEM,EAAa,WAGjB,IAAK,IAFD,EAAW,CAAA,EAEN,EAAI,EAAG,EAxJL,EAwJe,IAAK,CAC7B,IAAM,EAAM,CAAK,CAAC,EAAE,CACd,EAAe,EAAG,GAIlB,EAAgB,AADP,EADI,EAAI,OAAO,IAED,KAAK,GAAG,OAAO,GAEvC,EAAa,EAAa,IAC7B,CAAA,EAAW,CAAA,CADb,EAIA,CAAK,CAAC,EAAE,CAAG,EAEX,IAAK,IAAI,EAAI,EAAG,EArKJ,EAqKiB,IAAK,CAChC,IAAM,EAAM,CAAK,CAAC,EAAE,CAAC,EAAE,CAIvB,EAFoB,CAAI,CADN,AAvKR,EAuKQ,EAAc,EACG,CAEX,EAC1B,CACF,CAEA,OAAO,CACT,EAEM,EAAU,WAGd,IAAK,IAFD,EAAW,CAAA,EAEN,EAAI,EAAG,EApLF,EAoLe,IAAK,CAChC,IAAM,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAE1D,EAAS,EAAM,GAEhB,EAAa,EAAK,IACrB,CAAA,EAAW,CAAA,CADb,EAIA,IAAK,IAAI,EAAI,EAAG,EA9LP,EA8LiB,IAAK,CAC7B,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,CAEvB,IAAM,EAAM,CAAK,CAAC,EAAE,CAAC,EAAE,CAIvB,EAFoB,CAAI,CADN,AAjMR,EAiMQ,EAAc,EACG,CAEX,EAC1B,CACF,CAEA,OAAO,CACT,EAEM,EAAY,WAGhB,IAAK,IAFD,EAAW,CAAA,EAEN,EAAI,EAAG,EA9MF,EA8Me,IAAK,CAChC,IAAM,EAAM,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAC1D,EAAe,EAAG,GAIlB,EAAgB,AADP,EADI,EAAI,OAAO,IAED,KAAK,GAAG,OAAO,GAEvC,EAAa,EAAa,IAC7B,CAAA,EAAW,CAAA,CADb,EAIA,IAAK,IAAI,EAAI,EAAG,EA3NP,EA2NiB,IAAK,CAC7B,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAa,CAAC,EAAE,CAE9B,IAAM,EAAM,CAAK,CAAC,EAAE,CAAC,EAAE,CAIvB,EAFoB,CAAI,CADN,AA9NR,EA8NQ,EAAc,EACG,CAEX,EAC1B,CACF,CAEA,OAAO,CACT,EAEM,EAAe,SAAC,CAAA,CAAM,CAA5B,EACE,GAAI,EAAK,MAAM,GAAK,EAAK,MAAM,CAC7B,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC/B,GAAI,CAAI,CAAC,EAAE,GAAK,CAAI,CAAC,EAAE,CACrB,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,EAIM,EAAc,WAClB,IAAK,IAAI,EAAI,EAAG,EA1PL,EA0Pe,IACxB,IAAK,IAAI,EAAI,EAAG,EA1PJ,EA0PiB,IAC3B,GAAI,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CACb,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAEM,EAA0B,WAC9B,IAAK,IAAI,EAAI,EAAG,EAtQL,EAsQe,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAa,IAC/B,GAAI,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CACjC,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAEM,EAAwB,WAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,IAC5B,IAAK,IAAI,EAAI,EAAG,EAlRJ,EAkRiB,IAC3B,GAAI,CAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CACjC,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAUM,EAAe,WACnB,GAAK,IAML,IAFA,IAAI,EAAQ,CAAA,EAEL,CAAC,GAAS,CAAC,GAAe,CAC/B,IAAM,EAAI,KAAK,KAAK,CAAC,AA7SZ,EA6SY,KAAK,MAAM,IAC1B,EAAI,KAAK,KAAK,CAAC,AA7ST,EA6SS,KAAK,MAAM,GAEZ,CAAA,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,GACb,CAAK,CAAC,EAAE,CAAC,EAAE,CA1DQ,KAAK,MAAM,GAAK,GAAM,EAAI,EA+D7C,EAFoB,CAAI,CADN,AAlTR,EAkTQ,EAAc,EACG,CAEX,CAAK,CAAC,EAAE,CAAC,EAAE,EACnC,EAAQ,CAAA,GAGU,OAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,CAAA,EAAgB,CAAA,CADlB,GA5BE,KAIG,KAA6B,MA6BhC,EAAY,SAAS,CAAC,MAAM,CAAC,UAEzB,EAAQ,EAAU,KAAK,GACzB,EAAU,WAAW,CAAG,EACxB,aAAa,OAAO,CAAC,YAAa,IAGxC,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// UI\nvar gameScore = document.querySelector(\".game-score\");\nvar highScore = document.querySelector(\".high-score\");\n// Button\nvar startBtn = document.querySelector(\".start\");\nvar restartBtn = document.querySelector(\".restart\");\n// Message\nvar winMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar startMessage = document.querySelector(\".message-start\");\n// Game fields\nvar isGameHas2048 = false;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar cell = _to_consumable_array(document.querySelectorAll(\".field-cell\"));\nvar board;\nvar scoreFromLocalStorage = localStorage.getItem(\"highScore\");\n// Game logic\nwindow.onload = function() {\n    if (scoreFromLocalStorage) highScore.textContent = scoreFromLocalStorage;\n    else highScore.textContent = 0;\n};\nstartBtn.addEventListener(\"click\", function() {\n    setGame();\n    startMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    restartBtn.classList.remove(\"hidden\");\n    startBtn.classList.add(\"hidden\");\n});\nrestartBtn.addEventListener(\"click\", function() {\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    if (score > scoreFromLocalStorage) {\n        highScore.textContent = score;\n        localStorage.setItem(\"highScore\", score);\n    }\n    score = 0;\n    gameScore.textContent = score;\n    setGame();\n});\nvar setGame = function() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var num = board[r][c];\n        var cellIndex = r * columns + c;\n        var cellElement = cell[cellIndex];\n        updateCell(cellElement, num);\n    }\n    setTwoOrFour();\n    setTwoOrFour();\n};\nvar updateCell = function(cellElement, num) {\n    cellElement.textContent = \"\";\n    cellElement.classList.value = \"\";\n    cellElement.classList.add(\"field-cell\");\n    if (num > 0) {\n        cellElement.textContent = num.toString();\n        if (num < 2048) cellElement.classList.add(\"field-cell--\".concat(num.toString()));\n    }\n    if (num === 2048) {\n        isGameHas2048 = true;\n        winMessage.classList.remove(\"hidden\");\n    }\n};\ndocument.addEventListener(\"keyup\", function(e) {\n    if (e.code === \"ArrowLeft\") {\n        if (slideLeft()) setTwoOrFour();\n    } else if (e.code === \"ArrowRight\") {\n        if (slideRigth()) setTwoOrFour();\n    } else if (e.code === \"ArrowUp\") {\n        if (slideUp()) setTwoOrFour();\n    } else if (e.code === \"ArrowDown\") {\n        if (slideDown()) setTwoOrFour();\n    }\n});\nvar filterZero = function(rowArr) {\n    return rowArr.filter(function(num) {\n        return num !== 0;\n    });\n};\nvar slide = function(rowArr) {\n    var newArr = filterZero(rowArr);\n    for(var i = 0; i < newArr.length - 1; i++)if (newArr[i] === newArr[i + 1]) {\n        newArr[i] *= 2;\n        newArr[i + 1] = 0;\n        score += newArr[i];\n        gameScore.textContent = score;\n    }\n    newArr = filterZero(newArr);\n    while(newArr.length < 4)newArr.push(0);\n    return newArr;\n};\nvar slideLeft = function() {\n    var isChange = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var newRow = slide(row);\n        if (!isArrayEqual(row, newRow)) isChange = true;\n        board[r] = newRow;\n        for(var c = 0; c < columns; c++){\n            var num = board[r][c];\n            var cellIndex = r * columns + c;\n            var cellElement = cell[cellIndex];\n            updateCell(cellElement, num);\n        }\n    }\n    return isChange;\n};\nvar slideRigth = function() {\n    var isChange = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        var originalArr = _to_consumable_array(row);\n        var rowReverse = row.reverse();\n        var newRow = slide(rowReverse);\n        var newRowReverse = newRow.slice().reverse();\n        if (!isArrayEqual(originalArr, newRowReverse)) isChange = true;\n        board[r] = newRowReverse;\n        for(var c = 0; c < columns; c++){\n            var num = board[r][c];\n            var cellIndex = r * columns + c;\n            var cellElement = cell[cellIndex];\n            updateCell(cellElement, num);\n        }\n    }\n    return isChange;\n};\nvar slideUp = function() {\n    var isChange = false;\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var newRow = slide(row);\n        if (!isArrayEqual(row, newRow)) isChange = true;\n        for(var r = 0; r < rows; r++){\n            board[r][c] = newRow[r];\n            var num = board[r][c];\n            var cellIndex = r * columns + c;\n            var cellElement = cell[cellIndex];\n            updateCell(cellElement, num);\n        }\n    }\n    return isChange;\n};\nvar slideDown = function() {\n    var isChange = false;\n    for(var c = 0; c < columns; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        var originalRow = _to_consumable_array(row);\n        var rowReverse = row.reverse();\n        var newRow = slide(rowReverse);\n        var newRowReverse = newRow.slice().reverse();\n        if (!isArrayEqual(originalRow, newRowReverse)) isChange = true;\n        for(var r = 0; r < rows; r++){\n            board[r][c] = newRowReverse[r];\n            var num = board[r][c];\n            var cellIndex = r * columns + c;\n            var cellElement = cell[cellIndex];\n            updateCell(cellElement, num);\n        }\n    }\n    return isChange;\n};\nvar isArrayEqual = function(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n};\nvar randomTile = function() {\n    return Math.random() > 0.9 ? 4 : 2;\n};\nvar isEmptyTile = function() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n};\nvar checkHorizontalGameOver = function() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns - 1; c++){\n        if (board[r][c] === board[r][c + 1]) return false;\n    }\n    return true;\n};\nvar checkVerticalGameOver = function() {\n    for(var r = 0; r < rows - 1; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === board[r + 1][c]) return false;\n    }\n    return true;\n};\nvar isGameOver = function() {\n    if (isEmptyTile()) return false;\n    return checkHorizontalGameOver() && checkVerticalGameOver();\n};\nvar setTwoOrFour = function() {\n    if (!isEmptyTile()) return;\n    var found = false;\n    while(!found && !isGameHas2048){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            board[r][c] = randomTile();\n            var cellIndex = r * columns + c;\n            var cellElement = cell[cellIndex];\n            updateCell(cellElement, board[r][c]);\n            found = true;\n        }\n        if (board[r][c] === 2048) isGameHas2048 = true;\n        if (isGameOver()) {\n            loseMessage.classList.remove(\"hidden\");\n            if (score > highScore.value) {\n                highScore.textContent = score;\n                localStorage.setItem(\"highScore\", score);\n            }\n        }\n    }\n};\n\n//# sourceMappingURL=index.98257aba.js.map\n","'use strict';\n\n// UI\nconst gameScore = document.querySelector('.game-score');\nconst highScore = document.querySelector('.high-score');\n\n// Button\nconst startBtn = document.querySelector('.start');\nconst restartBtn = document.querySelector('.restart');\n\n// Message\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\n\n// Game fields\nlet isGameHas2048 = false;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst cell = [...document.querySelectorAll('.field-cell')];\nlet board;\nconst scoreFromLocalStorage = localStorage.getItem('highScore');\n\n// Game logic\nwindow.onload = () => {\n  if (scoreFromLocalStorage) {\n    highScore.textContent = scoreFromLocalStorage;\n  } else {\n    highScore.textContent = 0;\n  }\n};\n\nstartBtn.addEventListener('click', () => {\n  setGame();\n\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  restartBtn.classList.remove('hidden');\n  startBtn.classList.add('hidden');\n});\n\nrestartBtn.addEventListener('click', () => {\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  if (score > scoreFromLocalStorage) {\n    highScore.textContent = score;\n    localStorage.setItem('highScore', score);\n  }\n\n  score = 0;\n  gameScore.textContent = score;\n  setGame();\n});\n\nconst setGame = () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  setTwoOrFour();\n  setTwoOrFour();\n};\n\nconst updateCell = (cellElement, num) => {\n  cellElement.textContent = '';\n  cellElement.classList.value = '';\n  cellElement.classList.add('field-cell');\n\n  if (num > 0) {\n    cellElement.textContent = num.toString();\n\n    if (num < 2048) {\n      cellElement.classList.add(`field-cell--${num.toString()}`);\n    }\n  }\n\n  if (num === 2048) {\n    isGameHas2048 = true;\n    winMessage.classList.remove('hidden');\n  }\n};\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'ArrowLeft') {\n    if (slideLeft()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowRight') {\n    if (slideRigth()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowUp') {\n    if (slideUp()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowDown') {\n    if (slideDown()) {\n      setTwoOrFour();\n    }\n  }\n});\n\nconst filterZero = (rowArr) => {\n  return rowArr.filter(num => num !== 0);\n};\n\nconst slide = (rowArr) => {\n  let newArr = filterZero(rowArr);\n\n  for (let i = 0; i < newArr.length - 1; i++) {\n    if (newArr[i] === newArr[i + 1]) {\n      newArr[i] *= 2;\n      newArr[i + 1] = 0;\n      score += newArr[i];\n      gameScore.textContent = score;\n    }\n  }\n\n  newArr = filterZero(newArr);\n\n  while (newArr.length < 4) {\n    newArr.push(0);\n  }\n\n  return newArr;\n};\n\nconst slideLeft = () => {\n  let isChange = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide(row);\n\n    if (!isArrayEqual(row, newRow)) {\n      isChange = true;\n    }\n    board[r] = newRow;\n\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideRigth = () => {\n  let isChange = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n    const originalArr = [...row];\n\n    const rowReverse = row.reverse();\n    const newRow = slide(rowReverse);\n    const newRowReverse = newRow.slice().reverse();\n\n    if (!isArrayEqual(originalArr, newRowReverse)) {\n      isChange = true;\n    }\n\n    board[r] = newRowReverse;\n\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideUp = () => {\n  let isChange = false;\n\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide(row);\n\n    if (!isArrayEqual(row, newRow)) {\n      isChange = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newRow[r];\n\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideDown = () => {\n  let isChange = false;\n\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    const rowReverse = row.reverse();\n    const newRow = slide(rowReverse);\n    const newRowReverse = newRow.slice().reverse();\n\n    if (!isArrayEqual(originalRow, newRowReverse)) {\n      isChange = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newRowReverse[r];\n\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst isArrayEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst randomTile = () => Math.random() > 0.9 ? 4 : 2;\n\nconst isEmptyTile = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkHorizontalGameOver = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst checkVerticalGameOver = () => {\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst isGameOver = () => {\n  if (isEmptyTile()) {\n    return false;\n  }\n\n  return checkHorizontalGameOver() && checkVerticalGameOver();\n};\n\nconst setTwoOrFour = () => {\n  if (!isEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found && !isGameHas2048) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = randomTile();\n\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, board[r][c]);\n      found = true;\n    }\n\n    if (board[r][c] === 2048) {\n      isGameHas2048 = true;\n    }\n\n    if (isGameOver()) {\n      loseMessage.classList.remove('hidden');\n\n      if (score > highScore.value) {\n        highScore.textContent = score;\n        localStorage.setItem('highScore', score);\n      }\n    }\n  }\n};\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","gameScore","document","querySelector","highScore","startBtn","restartBtn","winMessage","loseMessage","startMessage","isGameHas2048","score","cell","querySelectorAll","scoreFromLocalStorage","localStorage","getItem","window","onload","textContent","addEventListener","setGame","classList","add","remove","setItem","r","c","num","updateCell","setTwoOrFour","cellElement","value","concat","e","code","slideLeft","slideRigth","slideUp","slideDown","filterZero","rowArr","filter","slide","newArr","push","isChange","row","newRow","isArrayEqual","originalArr","newRowReverse","reverse","originalRow","arr1","isEmptyTile","checkHorizontalGameOver","columns","checkVerticalGameOver","rows","found","Math","floor","random"],"version":3,"file":"index.98257aba.js.map"}